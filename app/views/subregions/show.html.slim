- provide(:title, "#{@subregion.name}, #{@region.name}")
- provide(:meta, ', viewport-fit=cover')

nav.navbar.navbar-light.fixed-top
  .row.font-weight-light.d-flex.align-items-center.pl-1
    span.text-light.region-label Region:
    select.margin-left onchange='window.location = this.value'
      - Region.ordered.each do |region|
        optgroup label=region.name
          - region.subregions.each do |subregion|
            option value=subregion_path(region, subregion) selected=('selected' if subregion == @subregion) =subregion.name
.subregion-container.safe-padding
  - @spots.each do |meta, forecasts|
    - cache [EXPIRE_ON_UPDATE_KEY, :spot_chart, meta[:spot_id]]
      - from = forecasts.find_index { |p| p[:timestamp].monday? && p[:timestamp].hour < 3 }
      - from && to = forecasts[from..-1].find_index { |p| p[:timestamp].sunday? && p[:timestamp].hour > 20 }
      - to ? to += from : to = forecasts.size
      h2.font-weight-light.spot-header id=meta[:slug]
        span= link_to meta[:name], spot_path(@region, @subregion, meta[:slug])
        = map_link(Spot.map_url(meta[:lat], meta[:lon]))
        = spitcast_link(Spot.spitcast_url(meta[:spitcast_slug])) if meta[:spitcast_slug]
        = msw_link(Spot.msw_url(meta[:msw_id])) if meta[:msw_id]
        = surfline_link(Spot.surfline_url(meta[:surfline_v2_id])) if meta[:surfline_v2_id]
      = react_component 'SpotChart', {\
          data: [\
            { name: 'Max', data: forecasts.collect { |point| { y: point[:max_delta], color: rating_color(point[:avg_rating], :max) } }, stack: 'All' },
            { name: 'Avg', data: forecasts.collect { |point| { y: point[:avg_delta], color: rating_color(point[:avg_rating], :avg) } }, stack: 'All'},
            { name: 'Min', data: forecasts.collect { |point| { y: point[:min], color: rating_color(point[:avg_rating], :min), rating: rating_text(point[:avg_rating]), tooltip_time: point[:tooltip_time] } }, stack: 'All' },
          ],
          max: @max,
          plotBands: from && to && [{\
            color: '#F2F2F2',
            from: from - 0.5,
            to: to + 0.5,
          }],
          xLabels: forecasts.collect { |point| point[:xaxis_time] }\
        }
